% Parámetros del esquema de modulación GFSK
sampling_rate = 1000000; % Tasa de muestreo en Hz
symbol_rate = 1000; % Tasa de símbolos en baudios
modulation_index = 0.5; % Índice de modulación
frequency_deviation = 5000; % Desviación de frecuencia en Hz

% Cargar datos desde el archivo Excel
data = xlsread('Dataset.xlsx'); % Cambia 'archivo_excel.xlsx' al nombre de tu archivo Excel

% Obtener la señal a modular
heart_rate = data(:, 2);

% Normalizar la frecuencia cardíaca al rango [0, 1]
heart_rate_normalized = (heart_rate - min(heart_rate)) / (max(heart_rate) - min(heart_rate));

% Definir un umbral para binarizar los datos
umbral = 0.5; % Puedes ajustar este valor según tu caso específico

% Convertir los datos a valores binarios
heart_rate_binary = heart_rate_normalized > umbral; % Valores mayores que el umbral serán 1, los demás serán 0

% Parámetros del esquema de modulación GFSK
sampling_rate = 1000000; % Tasa de muestreo en Hz
symbol_rate = 1000; % Tasa de símbolos en baudios
modulation_index = 0.5; % Índice de modulación
frequency_deviation = 5000; % Desviación de frecuencia en Hz

% Medir el tiempo de modulación
tic();
% Modulación de la señal GFSK
gfskMod = comm.CPMModulator( ...
    'ModulationOrder',2, ...
    'FrequencyPulse','Gaussian', ...
    'BandwidthTimeProduct',0.5, ...
    'ModulationIndex',1, ...
    'BitInput',true);

modulated_signal = gfskMod(heart_rate_binary);
modulation_time = toc();

% Medir el tiempo de demodulación
tic();
% Demodulación de la señal GFSK
gfskDemod = comm.CPMDemodulator( ...
    'ModulationOrder',2, ...
    'FrequencyPulse','Gaussian', ...
    'BandwidthTimeProduct',0.5, ...
    'ModulationIndex',1, ...
    'BitOutput',true);

demodulated_bits = gfskDemod(modulated_signal);
demodulation_time = toc();

% Visualización de los resultados
figure;
subplot(3, 1, 1);
plot(heart_rate);
title('Señal original');
xlabel('Muestras');
ylabel('Amplitud');

subplot(3, 1, 2);
plot(modulated_signal);
title('Señal modulada');
xlabel('Muestras');
ylabel('Amplitud');

subplot(3, 1, 3);
stem(demodulated_bits);
title('Bits demodulados');
xlabel('Muestras');
ylabel('Valor');

disp(['Tiempo de modulación: ' num2str(modulation_time) ' segundos']);
disp(['Tiempo de demodulación: ' num2str(demodulation_time) ' segundos']);